AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::LanguageExtensions'
Description: 'VPC: Created VPC and Subnets dynamically based on the parameters'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Subnet Type count and CIDR Class'
      Parameters:
      - PublicSubnets
      - PrivateSubnets
      - ClassB

Mappings:
  subnets:
    Zero:
      Name: []
    One:
      Name: [ "1"]
    Two:
      Name: [ "1", "2"]
    Three:
      Name: [ "1", "2", "3" ]
    Four:
      Name: [ "1", "2", "3", "4"]
    Five:
      Name: [ "1", "2", "3", "4","5"]

Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255

  PublicSubnets:
    Description: Public Environments.
    Type: String
    Default: "Zero"
    AllowedValues: [ "Zero", "One", "Two" ]
  
  PrivateSubnets:
    Description: Private Environments.
    Type: String
    Default: "Zero"
    AllowedValues: [ "Zero", "One", "Two" ]

Conditions:
  CreateNonZeroPubSubnets: !Not [!Equals [!Ref PublicSubnets, "Zero"]]
  CreateNonZeroPrivSubnets: !Not [!Equals [!Ref PrivateSubnets, "Zero"]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub 'VPC-${AWS::StackName}'
  VPCCidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateNonZeroPubSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateNonZeroPrivSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private

  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateNonZeroPubSubnets
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateNonZeroPubSubnets
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryInPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateNonZeroPrivSubnets
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateNonZeroPrivSubnets
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  ## INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateNonZeroPubSubnets

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateNonZeroPubSubnets
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ## PUBLIC ROUTING FOR ALL the PUBLIC SUBNETS
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNonZeroPubSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Join [":",[!Sub '${AWS::StackName}',"Public Route Table for VPC "]]
          
  PublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateNonZeroPubSubnets
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## PRIVATE ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNonZeroPrivSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Join [":",[!Sub '${AWS::StackName}',"Private Route Table for VPC "]]

  ## Public Subnets Creation dynamically based on the parameter passed PublicSubnets
  'Fn::ForEach::PubSubNets':
    - publicSubs
    - !FindInMap [ subnets, !Ref PublicSubnets, Name ]
    - SubnetPublic${publicSubs}:
        DependsOn: VPCCidrBlock
        Type: 'AWS::EC2::Subnet'
        Properties:
          AvailabilityZone: !Select [{"Fn::Sub": "${publicSubs}"}, Fn::GetAZs: !Ref 'AWS::Region'] # AZ selection requires more generic macro to make sure selection is not going above the available AZs in that region
          CidrBlock: !Sub '10.${ClassB}.${publicSubs}.0/24' # Is this CIDR block good enough
          MapPublicIpOnLaunch: true
          VpcId: !Ref VPC
          Tags:
          - Key: Name
            Value: !Join [":",[!Sub '${AWS::StackName}',"Public Subnet ",{"Fn::Sub": "${publicSubs}"},"IN ",!Select [{"Fn::Sub": "${publicSubs}"}, !GetAZs ]]]
          - Key: Reach
            Value: public
      SubnetAssociationPublic${publicSubs}:
        DependsOn:
        - PublicRouteTable
        - !Sub SubnetPublic${publicSubs}
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: {"Ref": {"Fn::Sub": "SubnetPublic${publicSubs}"}}
          RouteTableId: !Ref PublicRouteTable
      SubnetNetworkAclAssociationPublic${publicSubs}:
        DependsOn:
        - NetworkAclPublic
        - !Sub SubnetPublic${publicSubs}
        Type: 'AWS::EC2::SubnetNetworkAclAssociation'
        Properties:
          SubnetId: {"Ref": {"Fn::Sub": "SubnetPublic${publicSubs}"}}
          NetworkAclId: !Ref NetworkAclPublic

  ## Private Subnets Creation dynamically based on the parameter passed PrivateSubnets
  'Fn::ForEach::PrivSubNets':
    - privateSubs
    - !FindInMap [ subnets, !Ref PrivateSubnets, Name ]
    - SubnetPrivate${privateSubs}:
        DependsOn: VPCCidrBlock
        Type: 'AWS::EC2::Subnet'
        Properties:
          AvailabilityZone: !Select [{"Fn::Sub": "${privateSubs}"}, !GetAZs ]
          CidrBlock: !Sub '10.${ClassB}.1${privateSubs}.0/24'
          MapPublicIpOnLaunch: false
          VpcId: !Ref VPC
          Tags:
          - Key: Name
            Value: !Join [":",[!Sub '${AWS::StackName}',"Private Subnet ",{"Fn::Sub": "${privateSubs}"},"IN",!Select [{"Fn::Sub": "${privateSubs}"}, !GetAZs ]]]
          - Key: Reach
            Value: private
      SubnetAssociationPrivate${privateSubs}:
        DependsOn:
        - PrivateRouteTable
        - !Sub SubnetPrivate${privateSubs}
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: {"Ref": {"Fn::Sub": "SubnetPrivate${privateSubs}"}}
          RouteTableId: !Ref PrivateRouteTable
      SubnetNetworkAclAssociationPrivate${privateSubs}:
        DependsOn:
        - NetworkAclPrivate
        - !Sub SubnetPrivate${privateSubs}
        Type: 'AWS::EC2::SubnetNetworkAclAssociation'
        Properties:
          SubnetId: {"Ref": {"Fn::Sub": "SubnetPrivate${privateSubs}"}}
          NetworkAclId: !Ref NetworkAclPrivate

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}'
  AZs:
    Description: 'Number of AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZList: 
    Description: 'List of AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZList'
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
      
  PublicRouteTable:
    Condition: CreateNonZeroPubSubnets
    Description: 'PublicRouteTable.'
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTable'
      
  PrivateRouteTable:
    Condition: CreateNonZeroPrivSubnets
    Description: 'PrivateRouteTable.'
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTable'

  'Fn::ForEach::PubSubNetsOut':
    - publicSubs
    - !FindInMap [ subnets, !Ref PublicSubnets, Name ]
    - SubnetPublic${publicSubs}:
        Description: 'Subnets public.'
        Value: !Join [',', [{"Ref": {"Fn::Sub": "SubnetPublic${publicSubs}"}}]]
        Export:
          Name: !Sub '${AWS::StackName}-SubnetsPublic${publicSubs}'
      SubnetAssociationPublic${publicSubs}:
        Description: 'Subnets association public.'
        Value: !Join [',', [{"Ref": {"Fn::Sub": "SubnetAssociationPublic${publicSubs}"}}]]
        Export:
          Name: !Sub '${AWS::StackName}-SubnetAssociationPublic${publicSubs}'
      SubnetNetworkAclAssociationPublic${publicSubs}:
        Description: 'Subnets NACL public.'
        Value: !Join [',', [{"Ref": {"Fn::Sub": "SubnetNetworkAclAssociationPublic${publicSubs}"}}]]
        Export:
          Name: !Sub '${AWS::StackName}-SubnetNetworkAclAssociationPublic${publicSubs}'


  'Fn::ForEach::PrivSubNetsOut':
    - privateSubs
    - !FindInMap [ subnets, !Ref PrivateSubnets, Name ]
    - SubnetPrivate${privateSubs}:
        Description: 'Subnets private.'
        Value: !Join [',', [{"Ref": {"Fn::Sub": "SubnetPrivate${privateSubs}"}}]]
        Export:
          Name: !Sub '${AWS::StackName}-SubnetsPrivate${privateSubs}'
      SubnetAssociationPrivate${privateSubs}:
        Description: 'Subnets association private.'
        Value: !Join [',', [{"Ref": {"Fn::Sub": "SubnetAssociationPrivate${privateSubs}"}}]]
        Export:
          Name: !Sub '${AWS::StackName}-SubnetAssociationPrivate${privateSubs}'
      SubnetNetworkAclAssociationPrivate${privateSubs}:
        Description: 'Subnets NACL private.'
        Value: !Join [',', [{"Ref": {"Fn::Sub": "SubnetNetworkAclAssociationPrivate${privateSubs}"}}]]
        Export:
          Name: !Sub '${AWS::StackName}-SubnetNetworkAclAssociationPrivate${privateSubs}'